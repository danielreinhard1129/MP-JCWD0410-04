// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Sample {
  id        Int      @id @default(autoincrement())
  name      String
  code      String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("samples") // if you want to use snake_case format
}

model User {
  id           Int           @id @default(autoincrement())
  username     String        @unique
  email        String        @unique
  password     String
  pfp          String
  referral     String        @unique
  role         Role
  provider     Provider
  isDeleted    Boolean       @default(false)
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  events       Event[]
  vouchers     Voucher[]
  checkouts    Checkout[]
  userVouchers UserVoucher[]
  userRewards  UserReward[]
  point        Point?

  @@map("users")
}

model Event {
  id             Int      @id @default(autoincrement())
  title          String
  desc           String   @db.LongText
  img            String
  price          Int
  quota          Int
  available_seat Int
  date           DateTime
  venueId        Int
  userId         Int
  isDeleted      Boolean  @default(false)
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  user            User            @relation(fields: [userId], references: [id])
  venue           Venue           @relation(fields: [venueId], references: [id])
  vouchers        Voucher[]
  checkouts       Checkout[]
  EventCategories EventCategory[]

  @@map("events")
}

model Category {
  id              Int             @id @default(autoincrement())
  category        String
  isDeleted       Boolean         @default(false)
  createdAt       DateTime        @default(now())
  updatedAt       DateTime        @updatedAt
  eventCategories EventCategory[]

  @@map("categories")
}

model EventCategory {
  id         Int      @id @default(autoincrement())
  isDeleted  Boolean  @default(false)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  eventId    Int
  categoryId Int

  event    Event    @relation(fields: [eventId], references: [id])
  category Category @relation(fields: [categoryId], references: [id])

  @@map("eventcategories")
}

model Venue {
  id        Int      @id @default(autoincrement())
  address   String   @unique
  isDeleted Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  cityId    Int

  city   City    @relation(fields: [cityId], references: [id])
  events Event[]

  @@map("venues")
}

model City {
  id        Int      @id @default(autoincrement())
  name      String
  isDeleted Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  venues    Venue[]

  @@map("cities")
}

model Review {
  id        Int      @id @default(autoincrement())
  text      String
  isDeleted Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("reviews")
}

model Point {
  id        Int      @id @default(autoincrement())
  total     Int      @default(0)
  expDate   DateTime @default(now())
  isDeleted Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  userId    Int      @unique
  user      User     @relation(fields: [userId], references: [id])

  @@map("points")
}

model Reward {
  id          Int          @id @default(autoincrement())
  code        String       @unique
  expDate     DateTime
  quota       Int
  claimed     Int          @default(0)
  isDeleted   Boolean      @default(false)
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  userRewards UserReward[]

  @@map("rewards")
}

model Checkout {
  id          Int      @id @default(autoincrement())
  total       Int
  ticketQty   Int
  pointUsed   Int?
  voucherUsed Int?
  rewardUsed  Int?
  isDeleted   Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  userId      Int
  eventId     Int

  user     User      @relation(fields: [userId], references: [id])
  event    Event     @relation(fields: [eventId], references: [id])
  payments Payment[]

  @@map("checkouts")
}

model Payment {
  id             Int            @id @default(autoincrement())
  status         Payment_Status
  isDeleted      Boolean        @default(false)
  createdAt      DateTime       @default(now())
  updatedAt      DateTime       @updatedAt
  checkoutId     Int
  paymentProofId Int

  checkout     Checkout     @relation(fields: [checkoutId], references: [id])
  paymentproof PaymentProof @relation(fields: [paymentProofId], references: [id])

  @@map("payments")
}

model Voucher {
  id        Int      @id @default(autoincrement())
  code      String   @unique
  expDate   DateTime
  quota     Int
  claimed   Int
  isDeleted Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  userId    Int
  eventId   Int

  user         User          @relation(fields: [userId], references: [id])
  event        Event         @relation(fields: [eventId], references: [id])
  userVouchers UserVoucher[]

  @@map("vouchers")
}

model PaymentProof {
  id        Int       @id @default(autoincrement())
  imgUrl    String    @unique
  isDeleted Boolean   @default(false)
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  payments  Payment[]

  @@map("paymentproofs")
}

model UserReward {
  id        Int      @id @default(autoincrement())
  isDeleted Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  userId    Int
  rewardId  Int

  user   User   @relation(fields: [userId], references: [id])
  reward Reward @relation(fields: [rewardId], references: [id])

  @@map("userrewards")
}

model UserVoucher {
  id        Int      @id @default(autoincrement())
  isDeleted Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  userId    Int
  voucherId Int

  user    User    @relation(fields: [userId], references: [id])
  voucher Voucher @relation(fields: [voucherId], references: [id])

  @@map("uservouchers")
}

enum Role {
  EO
  CUSTOMER
}

enum Payment_Status {
  Accepted
  Declined
  Pending
}

enum Provider {
  CREDENTIALS
  GOOGLE
}
