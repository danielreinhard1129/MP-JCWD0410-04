// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Sample {
  id        Int      @id @default(autoincrement())
  name      String
  code      String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("samples") // if you want to use snake_case format
}

model User {
  id           Int           @id @default(autoincrement())
  username     String        @unique
  email        String        @unique
  password     String
  pfp          String
  referral     String        @unique
  role         Role
  provider     Provider
  isDeleted    Boolean       @default(false)
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  events       Event[]
  vouchers     Voucher[]
  userVouchers UserVoucher[]
  userRewards  UserReward[]
  point        Point?
  reviews      Review[]
  payments     Payment[]

  @@map("users")
}

model Event {
  id            Int      @id @default(autoincrement())
  title         String
  desc          String   @db.LongText
  img           String
  price         Int
  quota         Int
  availableSeat Int
  location      String
  startDate     DateTime
  endDate       DateTime
  userId        Int
  categoryId    Int
  isDeleted     Boolean  @default(false)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  user     User      @relation(fields: [userId], references: [id])
  category Category  @relation(fields: [categoryId], references: [id])
  vouchers Voucher[]
  reviews  Review[]
  payments Payment[]

  @@map("events")
}

model Category {
  id        Int      @id @default(autoincrement())
  category  String
  isDeleted Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  events Event[]

  @@map("categories")
}

model Review {
  id        Int      @id @default(autoincrement())
  text      String   @db.LongText
  isDeleted Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  userId    Int
  eventId   Int

  user  User  @relation(fields: [userId], references: [id])
  event Event @relation(fields: [eventId], references: [id])

  @@map("reviews")
}

model Point {
  id        Int      @id @default(autoincrement())
  total     Int      @default(0)
  expDate   DateTime @default(now())
  isDeleted Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  userId    Int      @unique
  user      User     @relation(fields: [userId], references: [id])

  @@map("points")
}

model Reward {
  id          Int          @id @default(autoincrement())
  code        String       @unique
  expDate     DateTime
  quota       Int
  claimed     Int          @default(0)
  isDeleted   Boolean      @default(false)
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  userRewards UserReward[]

  @@map("rewards")
}

model Payment {
  id           Int            @id @default(autoincrement())
  total        Int
  qty          Int
  status       Payment_Status
  pointUsed    Int?
  voucherUsed  Int?
  rewardUsed   Int?
  paymentProof String?
  isDeleted    Boolean        @default(false)
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
  userId       Int
  eventId      Int

  user  User  @relation(fields: [userId], references: [id])
  event Event @relation(fields: [eventId], references: [id])

  @@map("payments")
}

model Voucher {
  id        Int      @id @default(autoincrement())
  code      String   @unique
  expDate   DateTime
  quota     Int
  claimed   Int
  isDeleted Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  userId    Int
  eventId   Int

  user         User          @relation(fields: [userId], references: [id])
  event        Event         @relation(fields: [eventId], references: [id])
  userVouchers UserVoucher[]

  @@map("vouchers")
}

model UserReward {
  id        Int           @id @default(autoincrement())
  status    Reward_Status @default(UNUSED)
  isDeleted Boolean       @default(false)
  createdAt DateTime      @default(now())
  updatedAt DateTime      @updatedAt
  userId    Int
  rewardId  Int

  user   User   @relation(fields: [userId], references: [id])
  reward Reward @relation(fields: [rewardId], references: [id])

  @@map("userrewards")
}

model UserVoucher {
  id        Int      @id @default(autoincrement())
  isDeleted Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  userId    Int
  voucherId Int

  user    User    @relation(fields: [userId], references: [id])
  voucher Voucher @relation(fields: [voucherId], references: [id])

  @@map("uservouchers")
}

enum Role {
  EO
  CUSTOMER
}

enum Payment_Status {
  WAITING_FOR_PAYMENT
  WAITING_FOR_ADMIN_CONFIRMATION
  DONE
  REJECTED
  EXPIRED
  CANCELED
}

enum Provider {
  CREDENTIALS
  GOOGLE
}

enum Reward_Status {
  USED
  UNUSED
}
